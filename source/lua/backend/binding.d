/**
Boost Software License - Version 1.0 - August 17th, 2003

Copyright (c) 2018 Clipsey

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/
module lua.backend.binding;
import lua.backend.types;
import bindbc.loader;
import std.string;

extern (C) nothrow {
    /*
    ** state manipulation
    */
    alias lua_newstateFunc = lua_State* function(lua_Alloc, void*) nothrow;
    alias lua_closeFunc = void function(lua_State*) nothrow;
    alias lua_newthreadFunc = lua_State* function(lua_State*) nothrow;

    alias lua_versionFunc = lua_Number function(lua_State*) nothrow;

    /*
    ** basic stack manipulation
    */
    alias lua_absindexFunc = int function(lua_State*, int idx) nothrow;
    alias lua_gettopFunc = int function(lua_State*) nothrow;
    alias lua_settopFunc = void function(lua_State*, int) nothrow;
    alias lua_pushvalueFunc = void function(lua_State*, int) nothrow;
    alias lua_rotateFunc = void function(lua_State*, int, int) nothrow;
    alias lua_copyFuncFunc = void function(lua_State*, int, int) nothrow;
    alias lua_checkstackFunc = int function(lua_State*, int) nothrow;

    alias lua_xmoveFunc = void function(lua_State*, lua_State*, int) nothrow;

    /*
    ** access functions (stack -> C)
    */

    alias lua_isnumberFunc = int function(lua_State*, int) nothrow;
    alias lua_isstringFunc = int function(lua_State*, int) nothrow;
    alias lua_iscfunctionFunc = int function(lua_State*, int) nothrow;
    alias lua_isintegerFunc = int function(lua_State*, int) nothrow;
    alias lua_isuserdataFunc = int function(lua_State*, int) nothrow;
    alias lua_typeFunc = int function(lua_State*, int) nothrow;
    alias lua_typenameFunc = const(char)* function(lua_State*, int) nothrow;

    alias lua_tonumberFunc = lua_Number function(lua_State*, int) nothrow;
    alias lua_tointegerFunc = lua_Integer function(lua_State*, int) nothrow;
    alias lua_tobooleanFunc = int function(lua_State*, int) nothrow;
    alias lua_tolstringFunc = const(char)* function(lua_State*, int, size_t) nothrow;
    alias lua_rawlenFunc = size_t function(lua_State*, int) nothrow;
    alias lua_tocfunctionFunc = lua_CFunction function(lua_State*, int) nothrow;
    alias lua_touserdataFunc = void* function(lua_State*, int) nothrow;
    alias lua_tothreadFunc = lua_State* function(lua_State*, int) nothrow;
    alias lua_topointerFunc = const(void)* function(lua_State*, int) nothrow;

    /*
    ** Comparison and arithmetic functions
    */

    /*alias lua_arithFunc = void function(lua_State*, int);

    alias lua_rawequalFunc = int function(lua_State*, int, int);
    alias lua_compareFunc = int function(lua_State*, int, int, int);*/

    /*
    ** push functions (C -> stack)
    */
    alias lua_pushnilFunc = void function(lua_State*) nothrow;
    alias lua_pushnumberFunc = void function(lua_State*, lua_Number) nothrow;
    alias lua_pushintegerFunc = void function(lua_State*, lua_Integer) nothrow;
    alias lua_pushlstringFunc = const(char)* function(lua_State*, const(char)*, size_t) nothrow;
    alias lua_pushstringFunc = const(char)* function(lua_State*, const(char)*) nothrow;
    alias lua_pushvfstringFunc = const(char)* function(lua_State*, const(char)*, ...) nothrow;
    alias lua_pushfstringFunc = const(char)* function(lua_State*, const(char)* ...) nothrow;
    alias lua_pushcclosureFunc = void function(lua_State*, lua_CFunction fn, int n) nothrow;
    alias lua_pushbooleanFunc = void function(lua_State*, int b) nothrow;
    alias lua_pushlightuserdataFunc = void function(lua_State*, void* p) nothrow;
    alias lua_pushthreadFunc = int function(lua_State*) nothrow;

    /*
    ** get functions (Lua -> stack)
    */
   // alias lua_getglobalFunc = int function(lua_State*, const(char)*);
    alias lua_gettableFunc = int function(lua_State*, int) nothrow;
    alias lua_getfieldFunc = int function(lua_State*, int, const(char)*) nothrow;
    alias lua_getiFunc = int function(lua_State*, int, lua_Integer) nothrow;
    alias lua_rawgetFunc = int function(lua_State*, int) nothrow;
    alias lua_rawgetiFunc = int function(lua_State*, int, lua_Integer) nothrow;
    alias lua_rawgetpFunc = int function(lua_State*, int, const(void)*) nothrow;

    alias lua_createtableFunc = void function(lua_State*, int, int) nothrow;
    alias lua_newuserdataFunc = void* function(lua_State*, size_t) nothrow;
    alias lua_getmetatableFunc = int function(lua_State*, int) nothrow;
    alias lua_getuservalueFunc = int function(lua_State*, int) nothrow;

    /*
    ** set functions (stack -> Lua)
    */
    //alias lua_setglobalFunc = void function(lua_State*, const(char)*);
    alias lua_settableFunc = void function(lua_State*, int) nothrow;
    alias lua_setfieldFunc = void function(lua_State*, int, const(char)*) nothrow;
    alias lua_setiFunc = void function(lua_State*, int, lua_Integer) nothrow;
    alias lua_rawsetFunc = void function(lua_State*, int) nothrow;
    alias lua_rawsetiFunc = void function(lua_State*, int, lua_Integer) nothrow;
    alias lua_rawsetpFunc = void function(lua_State*, int, const(void)*) nothrow;
    alias lua_setmetatableFunc = int function(lua_State*, int) nothrow;
    alias lua_setuservalueFunc = void function(lua_State*, int) nothrow;

    /*
    ** 'load' and 'call' functions (load and run Lua code)
    */
    alias lua_callFunc = void function(lua_State*, int, int, lua_KContext, lua_KFunction) nothrow;
    alias lua_pcallFunc = int function(lua_State*, int, int, int, lua_KContext, lua_KFunction) nothrow;
    alias lua_loadFunc = int function(lua_State*, lua_Reader, void*,
            const(char)*, const(char)*) nothrow;
    alias lua_dumpFunc = int function(lua_State*, lua_Writer, void*, int) nothrow;

    /*
    ** coroutine functions
    */
    alias lua_yieldkFunc = int function(lua_State*, int, lua_KContext, lua_KFunction) nothrow;
    alias lua_resumeFunc = int function(lua_State*, lua_State*, int) nothrow;
    alias lua_statusFunc = int function(lua_State*) nothrow;
    alias lua_isyieldableFunc = int function(lua_State*) nothrow;

    /**
        luaL
    */

    alias luaL_getmetafieldFunc = int function(lua_State*, int, const(char)*) nothrow;
    alias luaL_callmetaFunc = int function(lua_State*, int, const(char)*) nothrow;
    alias luaL_tolstringFunc = const(char)* function(lua_State*, int, size_t*) nothrow;
    alias luaL_argerrorFunc = int function(lua_State*, int, const(char)*) nothrow;
    alias luaL_checklstringFunc = const(char)* function(lua_State*, int, size_t* l) nothrow;
    alias luaL_optlstringFunc = const(char)* function(lua_State*, int, const(char)*, size_t*) nothrow;
    alias luaL_checknumberFunc = lua_Number function(lua_State*, int) nothrow;
    alias luaL_optnumberFunc = lua_Number function(lua_State*, int, lua_Number) nothrow;
    alias luaL_checkintegerFunc = lua_Integer function(lua_State*, int) nothrow;
    alias luaL_optintegerFunc = lua_Integer function(lua_State*, int, lua_Integer) nothrow;
    alias luaL_checkstackFunc = void function(lua_State*, int, const char*) nothrow;
    alias luaL_checktypeFunc = void function(lua_State*, int, int) nothrow;
    alias luaL_checkanyFunc = void function(lua_State*, int) nothrow;
    alias luaL_newmetatableFunc = int function(lua_State*, const(char)*) nothrow;
    alias luaL_setmetatableFunc = void function(lua_State*, const(char)*) nothrow;
    alias luaL_testudataFunc = void* function(lua_State*, int, const(char)*) nothrow;
    alias luaL_checkudataFunc = void* function(lua_State*, int, const(char)*) nothrow;
    alias luaL_whereFunc = void function(lua_State*, int) nothrow;
    alias luaL_errorFunc = int function(lua_State*, const(char)*, ...) nothrow;
    alias luaL_checkoptionFunc = int function(lua_State*, int, const(char)*,
            const(const(char)*[])) nothrow;
    alias luaL_fileresultFunc = int function(lua_State*, int, const(char)*) nothrow;
    alias luaL_execresultFunc = int function(lua_State*, int) nothrow;

    /* predefined references */

    alias luaL_refFunc = int function(lua_State*, int) nothrow;
    alias luaL_unrefFunc = void function(lua_State*, int, int) nothrow;
    alias luaL_loadfileFunc = int function(lua_State*, const(char)*, const(char)*) nothrow;
    alias luaL_loadbufferFunc = int function(lua_State*, const(char)*,
            size_t, const(char)*, const(char)*) nothrow;
    alias luaL_loadstringFunc = int function(lua_State*, const(char)*) nothrow;
    alias luaL_newstateFunc = lua_State* function() nothrow;
    alias luaL_lenFunc = lua_Integer function(lua_State*, int) nothrow;
    alias luaL_gsubFunc = const(char)* function(lua_State*, const(char)*,
            const(char)*, const(char)*) nothrow;
    alias luaL_setfuncsFunc = void function(lua_State*, const luaL_Reg*, int) nothrow;
    alias luaL_getsubtableFunc = int function(lua_State*, int, const(char)* fname) nothrow;
    alias luaL_tracebackFunc = void function(lua_State*, lua_State*, const(char)*, int) nothrow;
    alias luaL_requirefFunc = void function(lua_State*, const(char)*, lua_CFunction, int) nothrow;

    /* open all previous libraries */
    alias luaopen_baseFunc = int function(lua_State*) nothrow;
    alias luaopen_tableFunc = int function(lua_State*) nothrow;
    alias luaopen_ioFunc = int function(lua_State*) nothrow;
    alias luaopen_osFunc = int function(lua_State*) nothrow;
    alias luaopen_stringFunc = int function(lua_State*) nothrow;
    alias luaopen_mathFunc = int function(lua_State*) nothrow;
    alias luaopen_debugFunc = int function(lua_State*) nothrow;
    alias luaopen_packageFunc = int function(lua_State*) nothrow;
    alias luaL_openlibsFunc = void function(lua_State*) nothrow;
}
/++
    #define luaL_argcheck(L, cond,arg,extramsg)     \
                    ((void)((cond) || luaL_argerror(L, (arg), (extramsg))))
    #define luaL_dofile(L, fn) \
            (luaL_loadfile(L, fn) || lua_pcall(L, 0, LUA_MULTRET, 0))

    #define luaL_dostring(L, s) \
            (luaL_loadstring(L, s) || lua_pcall(L, 0, LUA_MULTRET, 0))

    #define luaL_getmetatable(L,n)  (lua_getfield(L, LUA_REGISTRYINDEX, (n)))

    #define luaL_opt(L,f,n,d)       (lua_isnoneornil(L,(n)) ? (d) : f(L,(n)))

    #define luaL_loadbuffer(L,s,sz,n)       luaL_loadbufferx(L,s,sz,n,NULL)
+/
//#define lua_call(L,n,r)         lua_callk(L, (n), (r), 0, NULL)
//#define lua_pcall(L,n,r,f)      lua_pcallk(L, (n), (r), (f), 0, NULL)

/*
** ===============================================================
** some useful macros
** ===============================================================
*/
extern(C) nothrow {
    void luaL_call(lua_State* L, int n, int r) {
        lua_call(L, n, r, 0, null);
    }

    int luaL_pcall(lua_State* L, int n, int r, int f) {
        return lua_pcall(L, n, r, f, 0, null);
    }

    int lua_loadfile(lua_State* L, const(char*) f) {
        return luaL_loadfile(L, f, null);
    }

    void luaL_newlibtable(T)(lua_State* L, T* l) {
        lua_createtable(L, 0, l.sizeof / l[0].sizeof - 1);
    }

    /*void luaL_newlib(T)(lua_State* L, T* l) {
        luaL_checkversion(L);
        luaL_newlibtable(L, l);
        luaL_setfuncs(L, l, 0);
    }*/

    const(char)* luaL_checkstring(lua_State* L, int n) {
        return luaL_checklstring(L, n, null);
    }

    const(char)* luaL_optstring(lua_State* L, int n, const(char)* d) {
        return luaL_optlstring(L, n, d, null);
    }

    const(char)* luaL_typename(lua_State* L, int i) {
        return lua_typename(L, lua_type(L, i));
    }

    int luaL_dostring(lua_State* L, const(char)* s) {
        luaL_loadstring(L, s);
        return luaL_pcall(L, 0, LUA_MULTRET, 0);
    }

    void lua_pop(lua_State* state, int amount) {
        lua_settop(state, -(amount)-1);
    }

    void lua_newtable(lua_State* state) {
        lua_createtable(state, 0, 0);
    }

    void lua_register(lua_State* state, const(char)* n, lua_CFunction func) {
        lua_pushcfunction(state, func);
        lua_setglobal(state, n);
    }

    void lua_pushcfunction(lua_State* state, lua_CFunction func) {
        lua_pushcclosure(state, func, 0);
    }

    /*int lua_strlen(lua_State* state, const(char)* i) {
        return lua_objlen(state, i);
    }*/

    void lua_pushliteral(lua_State* state, const(char)[] str) {
        lua_pushlstring(state, str.ptr, str.sizeof-1);
    }


    string lua_tostring(lua_State* state, int index) {
        import std.conv;
        return lua_tolstring(state, index, 0).text;
    }
}

/*
#define lua_strlen(L,i)         lua_objlen(L, (i))

#define lua_isfunction(L,n)     (lua_type(L, (n)) == LUA_TFUNCTION)
#define lua_istable(L,n)        (lua_type(L, (n)) == LUA_TTABLE)
#define lua_islightuserdata(L,n)        (lua_type(L, (n)) == LUA_TLIGHTUSERDATA)
#define lua_isnil(L,n)          (lua_type(L, (n)) == LUA_TNIL)
#define lua_isboolean(L,n)      (lua_type(L, (n)) == LUA_TBOOLEAN)
#define lua_isthread(L,n)       (lua_type(L, (n)) == LUA_TTHREAD)
#define lua_isnone(L,n)         (lua_type(L, (n)) == LUA_TNONE)
#define lua_isnoneornil(L, n)   (lua_type(L, (n)) <= 0)

#define lua_pushliteral(L, s)   \
        lua_pushlstring(L, "" s, (sizeof(s)/sizeof(char))-1)

#define lua_setglobal(L,s)      lua_setfield(L, LUA_GLOBALSINDEX, (s))
#define lua_getglobal(L,s)      lua_getfield(L, LUA_GLOBALSINDEX, (s))

#define lua_tostring(L,i)       lua_tolstring(L, (i), NULL)

*/
extern(C) nothrow {
    void lua_setglobal(lua_State* state, const(char)* name) {
        lua_setfield(state, LUA_GLOBALSINDEX, name);
    }

    int lua_getglobal(lua_State* state, const(char)* name) {
        return lua_getfield(state, LUA_GLOBALSINDEX, name);
    }

    /*
    ** compatibility macros and functions
    */

    lua_State* lua_open() {
        return luaL_newstate();
    }

    void lua_getregistry(lua_State* state) {
        lua_pushvalue(state, LUA_REGISTRYINDEX);
    }
}

//#define lua_getgccount(L)       lua_gc(L, LUA_GCCOUNT, 0)

__gshared {
    lua_newstateFunc lua_newstate;
    lua_closeFunc lua_close;
    lua_newthreadFunc lua_newthread;

    lua_versionFunc lua_version;

    lua_absindexFunc lua_absindex;
    lua_gettopFunc lua_gettop;
    lua_settopFunc lua_settop;
    lua_pushvalueFunc lua_pushvalue;
    lua_rotateFunc lua_rotate;
    lua_copyFuncFunc lua_copyFunc;
    lua_checkstackFunc lua_checkstack;
    lua_xmoveFunc lua_xmove;

    lua_isnumberFunc lua_isnumber;
    lua_isstringFunc lua_isstring;
    lua_iscfunctionFunc lua_iscfunction;
    lua_isintegerFunc lua_isinteger;
    lua_isuserdataFunc lua_isuserdata;
    lua_typeFunc lua_type;
    lua_typenameFunc lua_typename;

    lua_tonumberFunc lua_tonumber;
    lua_tointegerFunc lua_tointeger;
    lua_tobooleanFunc lua_toboolean;
    lua_tolstringFunc lua_tolstring;
    lua_rawlenFunc lua_rawlen;
    lua_tocfunctionFunc lua_tocfunction;
    lua_touserdataFunc lua_touserdata;
    lua_tothreadFunc lua_tothread;
    lua_topointerFunc lua_topointer;

    /*lua_arithFunc lua_arith;

    lua_rawequalFunc lua_rawequal;
    lua_compareFunc lua_compare;*/

    lua_pushnilFunc lua_pushnil;
    lua_pushnumberFunc lua_pushnumber;
    lua_pushintegerFunc lua_pushinteger;
    lua_pushlstringFunc lua_pushlstring;
    lua_pushstringFunc lua_pushstring;
    lua_pushvfstringFunc lua_pushvfstring;
    lua_pushfstringFunc lua_pushfstring;
    lua_pushcclosureFunc lua_pushcclosure;
    lua_pushbooleanFunc lua_pushboolean;
    lua_pushlightuserdataFunc lua_pushlightuserdata;
    lua_pushthreadFunc lua_pushthread;

    //lua_getglobalFunc lua_getglobal;
    lua_gettableFunc lua_gettable;
    lua_getfieldFunc lua_getfield;
    lua_getiFunc lua_geti;
    lua_rawgetFunc lua_rawget;
    lua_rawgetiFunc lua_rawgeti;
    lua_rawgetpFunc lua_rawgetp;

    lua_createtableFunc lua_createtable;
    lua_newuserdataFunc lua_newuserdata;
    lua_getmetatableFunc lua_getmetatable;
    lua_getuservalueFunc lua_getuservalue;

    //lua_setglobalFunc lua_setglobal;
    lua_settableFunc lua_settable;
    lua_setfieldFunc lua_setfield;
    lua_setiFunc lua_seti;
    lua_rawsetFunc lua_rawset;
    lua_rawsetiFunc lua_rawseti;
    lua_rawsetpFunc lua_rawsetp;
    lua_setmetatableFunc lua_setmetatable;
    lua_setuservalueFunc lua_setuservalue;

    lua_callFunc lua_call;
    lua_pcallFunc lua_pcall;
    lua_loadFunc lua_load;
    lua_dumpFunc lua_dump;

    lua_yieldkFunc lua_yieldk;
    lua_resumeFunc lua_resume;
    lua_statusFunc lua_status;
    lua_isyieldableFunc lua_isyieldable;

    luaL_getmetafieldFunc luaL_getmetafield;
    luaL_callmetaFunc luaL_callmeta;
    luaL_tolstringFunc luaL_tolstring;
    luaL_argerrorFunc luaL_argerror;
    luaL_checklstringFunc luaL_checklstring;
    luaL_optlstringFunc luaL_optlstring;
    luaL_checknumberFunc luaL_checknumber;
    luaL_optnumberFunc luaL_optnumber;
    luaL_checkintegerFunc luaL_checkinteger;
    luaL_optintegerFunc luaL_optinteger;
    luaL_checkstackFunc luaL_checkstack;
    luaL_checktypeFunc luaL_checktype;
    luaL_checkanyFunc luaL_checkany;
    luaL_newmetatableFunc luaL_newmetatable;
    luaL_setmetatableFunc luaL_setmetatable;
    luaL_testudataFunc luaL_testudata;
    luaL_checkudataFunc luaL_checkudata;
    luaL_whereFunc luaL_where;
    luaL_errorFunc luaL_error;
    luaL_checkoptionFunc luaL_checkoption;
    luaL_fileresultFunc luaL_fileresult;
    luaL_execresultFunc luaL_execresult;
    luaL_refFunc luaL_ref;
    luaL_unrefFunc luaL_unref;
    luaL_loadfileFunc luaL_loadfile;
    luaL_loadbufferFunc luaL_loadbuffer;
    luaL_loadstringFunc luaL_loadstring;
    luaL_newstateFunc luaL_newstate;
    luaL_lenFunc luaL_len;
    luaL_gsubFunc luaL_gsub;
    luaL_setfuncsFunc luaL_setfuncs;
    luaL_getsubtableFunc luaL_getsubtable;
    luaL_tracebackFunc luaL_traceback;
    luaL_requirefFunc luaL_requiref;

    luaopen_baseFunc luaopen_base;
    luaopen_tableFunc luaopen_table;
    luaopen_ioFunc luaopen_io;
    luaopen_osFunc luaopen_os;
    luaopen_stringFunc luaopen_string;
    luaopen_mathFunc luaopen_math;
    luaopen_debugFunc luaopen_debug;
    luaopen_packageFunc luaopen_package;
    luaL_openlibsFunc luaL_openlibs;
}

private {
    SharedLib lib;
}

void unloadLua() {
    if (lib != invalidHandle) {
        lib.unload();
    }
}

bool loadLua() {

    version (Windows) {
        const(char)[][] libNames = [
            "libluajit.so", "libluajit.so.5.1", "libluajit-5.1.so",
            "liblua.so.5.1", "liblua-5.1.so", "liblua.so"
        ];
    } else version (OSX) {
        throw new Exception("Not supported");
    } else version (Posix) {
        const(char)[][] libNames = [
            "libluajit.so", "libluajit.so.5.1", "libluajit-5.1.so",
            "liblua.so.5.1", "liblua-5.1.so", "liblua.so"
        ];
    } else {
        throw new Exception("Not supported");
    }
    foreach (lib; libNames) {
        if (loadLua(lib.ptr))
            return true;
    }
    return false;
}

bool loadLua(const(char)* libName) {
    resetErrors();
    import std.stdio;
    import std.conv;

    if (lib == invalidHandle) {
        lib = load(libName);
        if (lib == invalidHandle) {
            return false;
        }
    }

    auto errCount = errorCount();
    lib.bindSymbol(cast(void**)&lua_newstate, "lua_newstate");
    lib.bindSymbol(cast(void**)&lua_close, "lua_close");
    lib.bindSymbol(cast(void**)&lua_newthread, "lua_newthread");
    lib.bindSymbol(cast(void**)&lua_gettop, "lua_gettop");
    lib.bindSymbol(cast(void**)&lua_settop, "lua_settop");
    lib.bindSymbol(cast(void**)&lua_pushvalue, "lua_pushvalue");
    lib.bindSymbol(cast(void**)&lua_checkstack, "lua_checkstack");
    lib.bindSymbol(cast(void**)&lua_xmove, "lua_xmove");
    lib.bindSymbol(cast(void**)&lua_isnumber, "lua_isnumber");
    lib.bindSymbol(cast(void**)&lua_isstring, "lua_isstring");
    lib.bindSymbol(cast(void**)&lua_iscfunction, "lua_iscfunction");
    lib.bindSymbol(cast(void**)&lua_isuserdata, "lua_isuserdata");
    lib.bindSymbol(cast(void**)&lua_type, "lua_type");
    lib.bindSymbol(cast(void**)&lua_typename, "lua_typename");
    lib.bindSymbol(cast(void**)&lua_tonumber, "lua_tonumber");
    lib.bindSymbol(cast(void**)&lua_tointeger, "lua_tointeger");
    lib.bindSymbol(cast(void**)&lua_toboolean, "lua_toboolean");
    lib.bindSymbol(cast(void**)&lua_tolstring, "lua_tolstring");
    lib.bindSymbol(cast(void**)&lua_tocfunction, "lua_tocfunction");
    lib.bindSymbol(cast(void**)&lua_touserdata, "lua_touserdata");
    lib.bindSymbol(cast(void**)&lua_tothread, "lua_tothread");
    lib.bindSymbol(cast(void**)&lua_topointer, "lua_topointer");


    lib.bindSymbol(cast(void**)&lua_pushnil, "lua_pushnil");
    lib.bindSymbol(cast(void**)&lua_pushnumber, "lua_pushnumber");
    lib.bindSymbol(cast(void**)&lua_pushinteger, "lua_pushinteger");
    lib.bindSymbol(cast(void**)&lua_pushlstring, "lua_pushlstring");
    lib.bindSymbol(cast(void**)&lua_pushstring, "lua_pushstring");
    lib.bindSymbol(cast(void**)&lua_pushvfstring, "lua_pushvfstring");
    lib.bindSymbol(cast(void**)&lua_pushfstring, "lua_pushfstring");
    lib.bindSymbol(cast(void**)&lua_pushcclosure, "lua_pushcclosure");
    lib.bindSymbol(cast(void**)&lua_pushboolean, "lua_pushboolean");
    lib.bindSymbol(cast(void**)&lua_pushlightuserdata, "lua_pushlightuserdata");
    lib.bindSymbol(cast(void**)&lua_pushthread, "lua_pushthread");
    lib.bindSymbol(cast(void**)&lua_gettable, "lua_gettable");
    lib.bindSymbol(cast(void**)&lua_getfield, "lua_getfield");
    lib.bindSymbol(cast(void**)&lua_rawget, "lua_rawget");
    lib.bindSymbol(cast(void**)&lua_rawgeti, "lua_rawgeti");
    lib.bindSymbol(cast(void**)&lua_createtable, "lua_createtable");
    lib.bindSymbol(cast(void**)&lua_newuserdata, "lua_newuserdata");
    lib.bindSymbol(cast(void**)&lua_getmetatable, "lua_getmetatable");
    lib.bindSymbol(cast(void**)&lua_settable, "lua_settable");
    lib.bindSymbol(cast(void**)&lua_setfield, "lua_setfield");
    lib.bindSymbol(cast(void**)&lua_rawset, "lua_rawset");
    lib.bindSymbol(cast(void**)&lua_rawseti, "lua_rawseti");
    lib.bindSymbol(cast(void**)&lua_setmetatable, "lua_setmetatable");
    lib.bindSymbol(cast(void**)&lua_call, "lua_call");
    lib.bindSymbol(cast(void**)&lua_pcall, "lua_pcall");
    lib.bindSymbol(cast(void**)&lua_load, "lua_load");
    lib.bindSymbol(cast(void**)&lua_dump, "lua_dump");

    lib.bindSymbol(cast(void**)&lua_resume, "lua_resume");
    lib.bindSymbol(cast(void**)&lua_status, "lua_status");
    lib.bindSymbol(cast(void**)&lua_isyieldable, "lua_isyieldable");

    lib.bindSymbol(cast(void**)&luaL_getmetafield, "luaL_getmetafield");
    lib.bindSymbol(cast(void**)&luaL_callmeta, "luaL_callmeta");
    lib.bindSymbol(cast(void**)&luaL_argerror, "luaL_argerror");
    lib.bindSymbol(cast(void**)&luaL_checklstring, "luaL_checklstring");
    lib.bindSymbol(cast(void**)&luaL_optlstring, "luaL_optlstring");
    lib.bindSymbol(cast(void**)&luaL_checknumber, "luaL_checknumber");
    lib.bindSymbol(cast(void**)&luaL_optnumber, "luaL_optnumber");
    lib.bindSymbol(cast(void**)&luaL_checkinteger, "luaL_checkinteger");
    lib.bindSymbol(cast(void**)&luaL_optinteger, "luaL_optinteger");
    lib.bindSymbol(cast(void**)&luaL_checkstack, "luaL_checkstack");
    lib.bindSymbol(cast(void**)&luaL_checktype, "luaL_checktype");
    lib.bindSymbol(cast(void**)&luaL_checkany, "luaL_checkany");
    lib.bindSymbol(cast(void**)&luaL_newmetatable, "luaL_newmetatable");
    lib.bindSymbol(cast(void**)&luaL_setmetatable, "luaL_setmetatable");
    lib.bindSymbol(cast(void**)&luaL_where, "luaL_where");
    lib.bindSymbol(cast(void**)&luaL_error, "luaL_error");
    lib.bindSymbol(cast(void**)&luaL_checkoption, "luaL_checkoption");
    lib.bindSymbol(cast(void**)&luaL_ref, "luaL_ref");
    lib.bindSymbol(cast(void**)&luaL_unref, "luaL_unref");
    lib.bindSymbol(cast(void**)&luaL_loadfile, "luaL_loadfile");
    lib.bindSymbol(cast(void**)&luaL_loadbuffer, "luaL_loadbuffer");
    lib.bindSymbol(cast(void**)&luaL_loadstring, "luaL_loadstring");
    lib.bindSymbol(cast(void**)&luaL_newstate, "luaL_newstate");
    lib.bindSymbol(cast(void**)&luaL_gsub, "luaL_gsub");


    lib.bindSymbol(cast(void**)&luaopen_base, "luaopen_base");
    lib.bindSymbol(cast(void**)&luaopen_table, "luaopen_table");
    lib.bindSymbol(cast(void**)&luaopen_io, "luaopen_io");
    lib.bindSymbol(cast(void**)&luaopen_os, "luaopen_os");
    lib.bindSymbol(cast(void**)&luaopen_string, "luaopen_string");
    lib.bindSymbol(cast(void**)&luaopen_math, "luaopen_math");
    lib.bindSymbol(cast(void**)&luaopen_debug, "luaopen_debug");
    lib.bindSymbol(cast(void**)&luaopen_package, "luaopen_package");
    lib.bindSymbol(cast(void**)&luaL_openlibs, "luaL_openlibs");


    //lib.bindSymbol(cast(void**)&lua_version, "lua_version");
    //lib.bindSymbol(cast(void**)&lua_absindex, "lua_absindex");
    //lib.bindSymbol(cast(void**)&lua_rotate, "lua_rotate");
    //lib.bindSymbol(cast(void**)&lua_copy, "lua_copy");
    //lib.bindSymbol(cast(void**)&lua_isinteger, "lua_isinteger");
    //lib.bindSymbol(cast(void**)&lua_rawlen, "lua_rawlen");
    //lib.bindSymbol(cast(void**)&lua_arith, "lua_arith");
    //lib.bindSymbol(cast(void**)&lua_rawequal, "lua_rawequal");
    //lib.bindSymbol(cast(void**)&lua_compare, "lua_compare");
    //lib.bindSymbol(cast(void**)&lua_getglobal, "lua_getglobal");
    //lib.bindSymbol(cast(void**)&lua_geti, "lua_geti");
    //lib.bindSymbol(cast(void**)&lua_rawgetp, "lua_rawgetp");
    //lib.bindSymbol(cast(void**)&lua_yieldk, "lua_yieldk");
    //lib.bindSymbol(cast(void**)&luaL_tolstring, "luaL_tolstring");
    //lib.bindSymbol(cast(void**)&luaL_testudata, "luaL_testudata");
    //lib.bindSymbol(cast(void**)&luaL_checkudata, "luaL_checkudata");
    //lib.bindSymbol(cast(void**)&luaL_fileresult, "luaL_fileresult");
    //lib.bindSymbol(cast(void**)&luaL_execresult, "luaL_execresult");
    //lib.bindSymbol(cast(void**)&luaL_len, "luaL_len");
    //lib.bindSymbol(cast(void**)&luaL_setfuncs, "luaL_setfuncs");
    //lib.bindSymbol(cast(void**)&luaL_getsubtable, "luaL_getsubtable");
    //lib.bindSymbol(cast(void**)&luaL_traceback, "luaL_traceback");
    //lib.bindSymbol(cast(void**)&luaL_requiref, "luaL_requiref");
    //lib.bindSymbol(cast(void**)&lua_getuservalue, "lua_getuservalue");
    //lib.bindSymbol(cast(void**)&lua_setglobal, "lua_setglobal");
    //lib.bindSymbol(cast(void**)&lua_seti, "lua_seti");
    //lib.bindSymbol(cast(void**)&lua_rawsetp, "lua_rawsetp");
    //lib.bindSymbol(cast(void**)&lua_setuservalue, "lua_setuservalue");

    return errCount == errorCount();
}
